{
	MAR_load
	MBR_load
	IR_load
	MAR_take_EA
	MAR_take_MBR
	GPRF_load
	IRF_load
	PC_load
	MBR_take_GPRF
	MBR_take_IRF
	memory_load
	GPRF_take_EA
	GPRF_take_ALU
	CC_load
	ALU_op1_negate
	ALU_take_immed
	PC_jump_sel
	Ry_as_addr
	jiba_load
	jiba_as_addr
	GPRF_take_jiba
	GPRF_take_IO
	IO_flush
	IO_load
	GPRF_take_updated_PC
	PC_take_GPRF
	GPRF_take_immed
	PC_MBR_jump_sel
	GPRF_take_IO_STAT
}
{
	INITIALIZED				: FETCH_PC_TO_MAR
	FETCH_PC_TO_MAR			: FETCH_MEMORY_ACCESS
	FETCH_MEMORY_ACCESS		: FETCH_MBR_TO_IR
	FETCH_MBR_TO_IR			: DECODE
	DECODE 					: {
		0					: HALT						# HLT
		{
			1				# LDR
			65				# LDR, Indirect.
			2				# STR
			66				# STR, Indirect.
			67				# LDA, Indirect. Noticed that it shares the same path as LDR.
			33				# LDX
			97				# LDX, Indirect.
			34				# STX
			98				# STX, Indirect.
			4				# AMR
			68				# AMR, Indirect.
			5				# SMR
			69				# SMR, Indirect.
			75				# JMA, Indirect.
			78				# SOB, Indirect.
			72				# JZ, Indirect.
			73				# JNE, Indirect.
		}					: EA_TO_MAR
		{ 6 70 }			: ADD_TO_REG_Immed
		{ 7 71 }			: SUB_TO_REG_Immed
		{ 25 26 21 }		: ALU_TO_REGISTER
		3					: EA_TO_REGISTER			# LDA
		{
			16
			17
			18
			19
			20
		}					: REV_GPRF_TO_MBR
		{
			8
			9
			10
			11
			15
		}					: UPDATE_JUMP
		12					: FUNC_CALL
		13					: FUNC_RETURN
		14					: SOB_JUMP
		49					: IO_TO_GPRF
		50					: GPRF_TO_IO
		51					: IO_STAT_TO_GPRF
		63					: UPDATE_PC
	}
	EA_TO_MAR				: {
		{
			1				# LDR
			67				# LDA, Indirect.
			33				# LDX
			4				# AMR
			5				# SMR
		}					: MEMORY_ACCESS	
		{
			65				# LDR, Indirect.
			66				# STR, Indirect.
			97				# LDX, Indirect.
			98				# STX, Indirect.
			68				# AMR, Indirect.
			69				# SMR, Indirect.
			75				# JMA, Indirect.
			72				# JZ, Indirect.
			73				# JNE, Indirect.
			78				# SOB, Indirect.
		}					: PRE_MEMORY_ACCESS			
		2					: GPRF_TO_MBR				# STR	
		34					: IRF_TO_MBR				# STX
	}
	PRE_MEMORY_ACCESS		: {
		{75 72 73}			: MBR_UPDATE_JUMP
		78					: SOB_MBR_JUMP
		MBR_TO_MAR
	}
	MEMORY_ACCESS			: {
		{
			1				# LDR
			65				# LDR, Indirect.
			67				# LDA, Indirect.
		}					: MBR_TO_GPRF
		{
			66				# STR, Indirect.
			2				# STR
			34				# STX
		}					: UPDATE_PC	
		{
			33				# LDX
			97				# LDX, Indirect.
		}					: MBR_TO_IRF
		{
			4				# AMR
			68				# AMR, Indirect.
		}					: ALU_TO_REGISTER
		{
			5				# SMR
			69				# SMR, Indirect.
		}					: SUB_TO_REGISTER
	}
	REV_GPRF_TO_MBR			: {
		18 					: ALU_TO_CC
		{16 17}				: MUL_DIV_TO_REGISTER
		ALU_TO_REGISTER		# Default
	}
	MUL_DIV_TO_REGISTER		: JIBA_TO_REGISTER
	MBR_TO_MAR				: {
		{
			65				# LDR, Indirect.
			97				# LDX, Indirect.
			68				# AMR, Indirect.
			69				# SMR, Indirect.
		}					: MEMORY_ACCESS	
		66					: GPRF_TO_MBR				# STR, Indirect.
		98					: IRF_TO_MBR				# STX, Indirect.
	}
	{
		GPRF_TO_MBR	
		IRF_TO_MBR				
	}						: MEMORY_WRITE
	FUNC_RETURN				: RETURN_VALUE_ASSIGN
	{
		FUNC_CALL
		RETURN_VALUE_ASSIGN
		SOB_JUMP
		SOB_MBR_JUMP
		UPDATE_PC
		UPDATE_JUMP
		MBR_UPDATE_JUMP
	}						: FETCH_PC_TO_MAR
	{
		MBR_TO_GPRF
		EA_TO_REGISTER
		MBR_TO_IRF
		MEMORY_WRITE
		ALU_TO_REGISTER
		JIBA_TO_REGISTER
		SUB_TO_REGISTER
		ADD_TO_REG_Immed
		SUB_TO_REG_Immed
		IO_TO_GPRF
		GPRF_TO_IO
		IO_STAT_TO_GPRF
	}						: UPDATE_PC
}
{
	FETCH_PC_TO_MAR 		: MAR_load
	FETCH_MEMORY_ACCESS 	: MBR_load
	FETCH_MBR_TO_IR			: IR_load
	EA_TO_MAR				: MAR_take_EA, MAR_load
	MEMORY_ACCESS	 		: MBR_load
	PRE_MEMORY_ACCESS		: MBR_load
	MEMORY_WRITE			: memory_load
	MBR_TO_MAR				: MAR_take_MBR, MAR_load
	MBR_TO_GPRF				: GPRF_load
	MBR_TO_IRF			 	: IRF_load
	EA_TO_REGISTER 			: GPRF_take_EA, GPRF_load
	GPRF_TO_MBR			 	: MBR_take_GPRF, MBR_load
	REV_GPRF_TO_MBR			: MBR_take_GPRF, MBR_load, Ry_as_addr
	IRF_TO_MBR				: MBR_take_IRF, MBR_load
	ALU_TO_CC				: CC_load
	ALU_TO_REGISTER			: GPRF_take_ALU, GPRF_load, CC_load
	MUL_DIV_TO_REGISTER		: GPRF_take_ALU, GPRF_load, CC_load, jiba_load
	JIBA_TO_REGISTER		: jiba_as_addr, GPRF_load, GPRF_take_jiba
	SUB_TO_REGISTER			: GPRF_take_ALU, GPRF_load, CC_load, ALU_op1_negate
	ADD_TO_REG_Immed		: ALU_take_immed, GPRF_take_ALU, GPRF_load, CC_load
	SUB_TO_REG_Immed		: ALU_take_immed, GPRF_take_ALU, GPRF_load, CC_load, ALU_op1_negate	
	IO_TO_GPRF				: GPRF_take_IO, GPRF_load, IO_flush
	IO_STAT_TO_GPRF			: GPRF_take_IO_STAT, GPRF_load
	GPRF_TO_IO				: IO_load
	UPDATE_PC			 	: PC_load
	UPDATE_JUMP				: PC_load, PC_jump_sel
	MBR_UPDATE_JUMP			: PC_load, PC_MBR_jump_sel
	SOB_JUMP				: GPRF_take_ALU, GPRF_load, CC_load, PC_load, PC_jump_sel
	SOB_MBR_JUMP			: GPRF_take_ALU, GPRF_load, CC_load, PC_load, PC_MBR_jump_sel
	FUNC_CALL				: PC_load, PC_jump_sel, GPRF_take_updated_PC, GPRF_load
	FUNC_RETURN				: PC_load, PC_take_GPRF
	RETURN_VALUE_ASSIGN		: GPRF_load, GPRF_take_immed, Ry_as_addr
}